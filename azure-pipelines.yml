# @name: azure-pipelines.yml
# @description: ADO pipeline

#trigger:
#  branches:
#    include:
#      - main
#  paths:
#    include:
#      - changelog.xml

appendCommitMessageToRunName: false
  
name: $(Application.Name)-$(Build.BuildId)-CI

pool:
  name: $(Agent.PoolName)

variables:
- template: variables.yml

stages:
- stage: CI
  # condition: contains(variables['Build.SourceBranch'], 'dev')
  # condition: and(true, contains(variables['system.pullRequest.targetBranchName'], 'release'))
  # condition: eq('${{ parameters.LBCOMMAND }}', 'update')
  jobs:
  # - job: 
  #   workspace:
  #     clean: all
  - job: DB_CI
    displayName: 'Database CI'
    steps:

    - task: PowerShell@2
      displayName: 'Liquibase Flow - Run Checks'
      inputs:
        targetType: 'inline'
        script: |
          echo TAG=${env:TAG}
          echo App.Version=$(App.Version)
          echo Build.BuildId=$(Build.BuildId)

          # This flow file runs Liquibase Quality Checks
          # Both flow file and Quality Checks require Liquibase Pro license
          C:\agent\_work\_tool\liquibase-4.29.0\liquibase.bat flow --flow-file=flowfiles/liquibase.flowfile-ci.yaml
          Write-Host Last exit code: $LASTEXITCODE
      env:
        TAG: ${{ parameters.TAG }}
        LIQUIBASE_COMMAND_URL: $(QA_URL)
        LIQUIBASE_COMMAND_USERNAME: $(QA_USERNAME)
        LIQUIBASE_COMMAND_PASSWORD: $(QA_PASSWORD)
        LIQUIBASE_LICENSE_KEY: $(LIQUIBASE_LICENSE_KEY)

    # Dir
    - task: PowerShell@2
      displayName: 'Liquibase Reports Here'
      inputs:
        targetType: 'inline'
        script: |
          dir 
          cd reports
          dir

    # # Create a package
    # - task: UniversalPackages@0.228.0
    #   displayName: 'Publish Artifact Universal Package'
    #   inputs:
    #     command: publish
    #     publishDirectory: '.'
    #     vstsFeedPublish: 'Carmax/MX_Packages'
    #     vstsFeedPackagePublish: 'mx-db'
    #     # versionOption: 'custom'
    #     # versionPublish: $(Build.BuildId)
    #     packagePublishDescription: 'Package published by CI job $(Build.BuildId)'

    # Compress files into .zip
    # - task: ArchiveFiles@2
    #   displayName: Create a Zip
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
    #     includeRootFolder: true
    #     archiveType: 'zip'
    #     archiveFile: '$(System.DefaultWorkingDirectory)/artifacts/$(Application.Name)-$(Build.BuildId).zip'

    # If using Azure Artifacts
    # - upload: $(System.DefaultWorkingDirectory)/.
    - publish: $(System.DefaultWorkingDirectory)/.
      displayName: Publish artifact
      artifact: $(Application.Name)