# @name: azure-ci-pipelines.yml
# @description: ADO CI pipeline for Oracle DB deployment using Liquibase
# @author: Richard Koranteng (https://rkkoranteng.com)
# @changes: refer to CHANGELOG.md

#trigger:
#  branches:
#    include:
#      - main
#  paths:
#    include:
#      - changelog.xml

appendCommitMessageToRunName: false
  
name: $(Database.SID)-$(Build.BuildId)-CI

pool:
  name: $(Agent.PoolName)

variables:
- template: variables.yml


stages:

# build
# is this code valid and buildable
- stage: CI
  displayName: 'Build'
  jobs:
  - job: DB_CI
    displayName: 'Database CI'
    steps:

    - checkout: self

    # this task checks if liquibase is installed on the agent server
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Checking Liquibase version"
          & "$(L_DIR)\liquibase.bat" --version
      displayName: 'Check Liquibase Version'

    # this task validates that there are errors in liquibase changelog.xml and referenced changesets
    # check changelog structure
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: | 
          $URL = "jdbc:oracle:thin:@//$(Database.Host):$(Database.Port)/$(Database.SID)"
          & "$(L_DIR)\liquibase.bat" `
            --changeLogFile=$(L_CHANGELOG_FILE) `
            --url=$URL `
            --username="$(username)" `
            --password="$(password)" `
            validate
      displayName: 'Validate Changelog'

    # this task states the number of undeployed changesets
    # check pending changes
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: | 
          $URL = "jdbc:oracle:thin:@//$(Database.Host):$(Database.Port)/$(Database.SID)"
          & "$(L_DIR)\liquibase.bat" `
            --changeLogFile=$(L_CHANGELOG_FILE) `
            --url=$URL `
            --username="$(username)" `
            --password="$(password)" `
            status --verbose
      displayName: 'Show Pending Changesets'

    # this task reviews the SQL statements that will be executed against the database before actually applying them
    # preview changes
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: | 
          $URL = "jdbc:oracle:thin:@//$(Database.Host):$(Database.Port)/$(Database.SID)"
          & "$(L_DIR)\liquibase.bat" `
            --changeLogFile=$(L_CHANGELOG_FILE) `
            --url=$URL `
            --username="$(username)" `
            --password="$(password)" `
            updateSql > update-preview.sql
        workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Generate SQL Preview'

    # this task reviews the SQL statements that will be executed against the database before actually applying them
    # this task only runs if there's been a previous 'liquibase update' (deployment)
    # preview rollback logic
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: | 
          [xml]$changelog = Get-Content "$(Build.SourcesDirectory)\changelog.xml"
          $versionNode = $changelog.databaseChangeLog.property | Where-Object { $_.name -eq "changeLogVersion" }
          $tag = $versionNode.value
          Write-Host "version: $tag"

          $sqlFile = "$(Build.SourcesDirectory)\check_tag.sql"

          @"
            SET HEADING OFF
            SET FEEDBACK OFF
            SET VERIFY OFF
            SELECT COUNT(*) FROM DATABASECHANGELOG WHERE TAG = '$tag';
            EXIT
          "@ | Out-File -Encoding ascii $sqlFile

          $CHANGELOG_TBL_RESULT = & "$(Oracle.Home)\bin\sqlplus" -s "$(username)/$(password)@//$(Database.Host):$(Database.Port)/$(Database.SID)" "$(Build.SourcesDirectory)\check_tag.sql"
    
          if ($CHANGELOG_TBL_RESULT.Trim() -match '^[1-9]') {
            Write-Host "Tag $tag exists. Generating rollback SQL..."
            $URL = "jdbc:oracle:thin:@//$(Database.Host):$(Database.Port)/$(Database.SID)"
            & "$(L_DIR)\liquibase.bat" `
              --changeLogFile=$(L_CHANGELOG_FILE) `
              --url=$URL `
              --username="$(username)" `
              --password="$(password)" `
              rollbackSql 1 > rollback-preview.sql
          } else {
            Write-Host "Tag $tag does not exist yet. Skipping rollback SQL preview." > rollback-preview.txt
          }
        workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Generate Rollback SQL Preview'

    # this task deploys to dev
    - task: PowerShell@2
      displayName: 'Deploy to Dev'
      inputs:
        targetType: 'inline'
        script: |
          $URL = "jdbc:oracle:thin:@//$(Prod.Host):$(Prod.Port)/$(Prod.SID)"
          & "$(L_DIR)\liquibase.bat" `
            --changeLogFile=$(L_CHANGELOG_FILE) `
            --url=$URL `
            --username="$(username)" `
            --password="$(password)" `
            update
        workingDirectory: $(Build.SourcesDirectory)

    # mark version only after confirming safety
    - task: PowerShell@2
      displayName: 'Liquibase Tag'
      inputs:
        targetType: 'inline'
        script: |
          [xml]$changelog = Get-Content "$(Build.SourcesDirectory)\changelog.xml"
          $versionNode = $changelog.databaseChangeLog.property | Where-Object { $_.name -eq "changeLogVersion" }
          $tag = $versionNode.value
          Write-Host "version: $tag" > version.txt

          $URL = "jdbc:oracle:thin:@//$(Prod.Host):$(Prod.Port)/$(Prod.SID)"
          & "$(L_DIR)\liquibase.bat" `
            --changeLogFile=$(L_CHANGELOG_FILE) `
            --url=$URL `
            --username="$(username)" `
            --password="$(password)" `
            tag $tag
        workingDirectory: $(Build.SourcesDirectory) 

    # this task records metadata like build number, commit hash, timestamp, and changelog ID for traceability.
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: | 
          $metadata = @{
            buildNumber = "$(Build.BuildNumber)"
            buildId = "$(Build.BuildId)"
            sourceBranch = "$(Build.SourceBranch)"
            commitId = "$(Build.SourceVersion)"
            buildTime = (Get-Date).ToString("s")
            changelogFile = "$(L_CHANGELOG_FILE)"
            environment = "$(Build.SourceBranchName)"
          }
          $json = $metadata | ConvertTo-Json -Depth 2
          $json | Out-File -FilePath "$(Build.SourcesDirectory)\build-metadata.json" -Encoding utf8
        workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Generate Build Metadata'

    # this task builds database ci artifact
    - task: PowerShell@2
      displayName: 'Build Artifact'
      inputs:
        targetType: 'inline'
        script: |
          Copy-Item `
            -Path $(Build.SourcesDirectory)\* `
            -Destination $(Build.ArtifactStagingDirectory) `
            -Exclude "LICENSE", "lib", "CHANGELOG.md", "azure-ci-pipelines.yml", "azure-cd-pipelines.yml", "check_tag.sql", "README.md" `
            -Recurse

#    - task: ArchiveFiles@2
#      displayName: 'Archive Liquibase Changelogs'
#      inputs:
#        rootFolderOrFile: '$(Build.SourcesDirectory)'
#        includeRootFolder: false
#        archiveType: 'zip'
#        archiveFile: '$(Build.ArtifactStagingDirectory)/liquibase-release.zip'
#        replaceExistingArchive: true

    # this task publishes database ci artifact
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'db-ci-artifact'
        publishLocation: 'Container'